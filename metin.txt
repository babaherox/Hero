from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes
import sqlite3
import random
import string
import os
import aiofiles  # For async file handling

# Veritabanı başlatma
def init_db():
    conn = sqlite3.connect('referral_bot.db')
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS users (
                    user_id INTEGER PRIMARY KEY,
                    referral_code TEXT UNIQUE,
                    points INTEGER DEFAULT 0,
                    invited_by INTEGER
                )''')
    c.execute('''CREATE TABLE IF NOT EXISTS rewards (
                    user_id INTEGER,
                    reward_type TEXT,
                    reward_code TEXT,
                    timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
                )''')
    conn.commit()
    conn.close()

# Rastgele referans kodu oluştur
def generate_referral_code():
    return ''.join(random.choices(string.ascii_uppercase + string.digits, k=8))

# Txt dosyasından ödül çek
def get_reward(reward_type):
    file_map = {'pazarama': 'pazarama.txt', 'amazon': 'amazon.txt', 'cc': 'cc.txt'}
    file_path = file_map.get(reward_type)

    if not os.path.exists(file_path):
        return None

    with open(file_path, 'r') as f:
        lines = [line.strip() for line in f if line.strip()]

    if not lines:
        return None

    reward = lines[0]  # İlk satırı al
    with open(file_path, 'w') as f:
        f.write('\n'.join(lines[1:]))  # Kalan satırları geri yaz
    return reward

# Ödül stoğunu kontrol et
def check_stock(reward_type):
    file_map = {'pazarama': 'pazarama.txt', 'amazon': 'amazon.txt', 'cc': 'cc.txt'}
    file_path = file_map.get(reward_type)

    if not os.path.exists(file_path):
        return 0
    with open(file_path, 'r') as f:
        return len([line.strip() for line in f if line.strip()])

# /start komutu
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    args = context.args
    conn = sqlite3.connect('referral_bot.db')
    c = conn.cursor()

    c.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
    user = c.fetchone()

    if not user:
        referral_code = generate_referral_code()
        invited_by = None
        if args and args[0]:
            c.execute('SELECT user_id FROM users WHERE referral_code = ?', (args[0],))
            inviter = c.fetchone()
            if inviter:
                invited_by = inviter[0]
        c.execute('INSERT INTO users (user_id, referral_code, points, invited_by) VALUES (?, ?, ?, ?)', 
                 (user_id, referral_code, 0, invited_by))
        conn.commit()
    else:
        referral_code = user[1]

    conn.close()

    channels = ['@Zirvefinans_sh4', '@Zirvefinans_chat']  # Zorunlu kanallar
    joined_all = True
    for channel in channels:
        try:
            member = await context.bot.get_chat_member(channel, user_id)
            if member.status not in ['member', 'administrator', 'creator']:
                joined_all = False
                break
        except:
            joined_all = False
            break

    if joined_all and user and user[3]:
        conn = sqlite3.connect('referral_bot.db')
        c = conn.cursor()
        c.execute('UPDATE users SET points = points + 1 WHERE user_id = ?', (user[3],))
        conn.commit()
        conn.close()

    bot_username = (await context.bot.get_me()).username
    referral_link = f"https://t.me/{bot_username}?start={referral_code}"

    if joined_all:
        await update.message.reply_text(
            f"Hoş geldiniz! Referans linkiniz: {referral_link}\n"
            "Arkadaşlarınızı davet ederek puan kazanın. Ödüller için /rewards komutunu kullanın."
        )
    else:
        await update.message.reply_text(
            f"Lütfen şu kanallara katılın: {', '.join(channels)}"
        )

# /rewards komutu
async def rewards(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    conn = sqlite3.connect('referral_bot.db')
    c = conn.cursor()

    c.execute('SELECT points FROM users WHERE user_id = ?', (user_id,))
    points = c.fetchone()[0]

    conn.close()

    keyboard = [
        [InlineKeyboardButton("Pazarama Account (1 Referans)", callback_data='pazarama')],
        [InlineKeyboardButton("Amazon Account (1 Referans)", callback_data='amazon')],
        [InlineKeyboardButton("CC (3 Referans)", callback_data='cc')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        f"Mevcut referans sayınız: {points}\nÖdül seçmek için bir butona tıklayın:",
        reply_markup=reply_markup
    )

# Buton tıklamalarını işleme
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    reward_type = query.data

    conn = sqlite3.connect('referral_bot.db')
    c = conn.cursor()

    c.execute('SELECT points FROM users WHERE user_id = ?', (user_id,))
    points = c.fetchone()[0]

    required_points = 3 if reward_type == 'cc' else 1

    if points >= required_points:
        reward_code = get_reward(reward_type)
        if reward_code:
            c.execute('UPDATE users SET points = points - ? WHERE user_id = ?', 
                     (required_points, user_id))
            c.execute('INSERT INTO rewards (user_id, reward_type, reward_code) VALUES (?, ?, ?)', 
                     (user_id, reward_type, reward_code))
            conn.commit()

            reward_message = (
                f"{reward_type.capitalize()} ödülünüz:\n"
                f"{reward_code}" if reward_type == 'cc' else
                f"Kullanıcı: {reward_code.split(':')[0]}\nŞifre: {reward_code.split(':')[1]}"
            )
            await query.message.reply_text(reward_message)
        else:
            await query.message.reply_text(f"Maalesef {reward_type} ödülleri tükendi!")
    else:
        await query.message.reply_text("Yeterli referans sayınız yok! Daha fazla kullanıcı davet edin.")

    conn.close()

# /admin komutu
async def admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    admin_id = 7995980007  # Admin ID

    if user_id != admin_id:
        await update.message.reply_text("Bu komut sadece adminler içindir!")
        return

    conn = sqlite3.connect('referral_bot.db')
    c = conn.cursor()

    c.execute('SELECT COUNT(*), SUM(points) FROM users')
    total_users, total_points = c.fetchone()

    c.execute('SELECT user_id, reward_type, reward_code, timestamp FROM rewards ORDER BY timestamp DESC LIMIT 5')
    recent_rewards = c.fetchall()

    conn.close()

    reward_text = "\n".join([f"User {r[0]} - {r[1].capitalize()}: {r[2]} ({r[3]})" for r in recent_rewards])

    stock_text = (
        f"Pazarama Stoğu: {check_stock('pazarama')}/100\n"
        f"Amazon Stoğu: {check_stock('amazon')}/100\n"
        f"CC Stoğu: {check_stock('cc')}/100"
    )

    await update.message.reply_text(
        f"Admin Paneli:\n"
        f"Toplam Kullanıcı: {total_users}\n"
        f"Toplam Referans: {total_points}\n"
        f"Ödül Stoğu:\n{stock_text}\n"
        f"Son Ödüller:\n{reward_text or 'Henüz ödül dağıtılmadı.'}"
    )

# /stok komutu - Sadece stok gösterimi
async def stok(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    admin_id = 7995980007  # Admin ID

    if user_id != admin_id:
        await update.message.reply_text("Bu komut sadece adminler içindir!")
        return

    stock_text = (
        f"Pazarama Kalan Stoğu: {check_stock('pazarama')}\n"
        f"Amazon Kalan Stoğu: {check_stock('amazon')}\n"
        f"CC Kalan Stoğu: {check_stock('cc')}"
    )

    await update.message.reply_text(f"Ödül Stokları:\n{stock_text}")

# Txt dosyası yükleme (stok yenileme)
async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    admin_id = 7995980007  # Admin ID

    if user_id != admin_id:
        await update.message.reply_text("Sadece admin stok yenileyebilir!")
        return

    document = update.message.document
    if not document.file_name.endswith('.txt'):
        await update.message.reply_text("Lütfen bir .txt dosyası gönderin!")
        return

    file_name = document.file_name.lower()
    if file_name not in ['pazarama.txt', 'amazon.txt', 'cc.txt']:
        await update.message.reply_text("Dosya adı pazarama.txt, amazon.txt veya cc.txt olmalı!")
        return

    reward_type = file_name.split('.')[0]
    file = await document.get_file()
    file_path = f"{reward_type}.txt"

    bytearray_file = await file.download_as_bytearray()
    async with aiofiles.open(file_path, 'a') as f:
        await f.write(bytearray_file.decode('utf-8') + '\n')

    await update.message.reply_text(f"{reward_type.capitalize()} stoğu başarıyla yenilendi! Yeni stok: {check_stock(reward_type)}")

def main():
    init_db()
    app = Application.builder().token('8134157413:AAGlypJYfl-XmBTD5rLgQe7tGuFFd1lS2Qw').build()

    app.add_handler(CommandHandler('start', start))
    app.add_handler(CommandHandler('rewards', rewards))
    app.add_handler(CommandHandler('admin', admin))
    app.add_handler(CommandHandler('stok', stok))
    app.add_handler(CallbackQueryHandler(button))
    app.add_handler(MessageHandler(filters.Document.ALL, handle_document))

    app.run_polling()

if __name__ == '__main__':
    main()